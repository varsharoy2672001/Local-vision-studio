
"use client";

import React, { useState, useRef, useEffect } from "react";
import VideoPlayer from "@/components/video-player";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { UploadCloud } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

export default function HomePage() {
  const [videoSrc, setVideoSrc] = useState<string | null>(null);
  const [videoFile, setVideoFile] = useState<File | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { toast } = useToast();

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      if (!file.type.startsWith("video/")) {
        toast({
          title: "Invalid File Type",
          description: "Please select a valid video file (MP4, AVI, MOV, etc.).",
          variant: "destructive",
        });
        return;
      }
      
      // Revoke previous object URL if one exists
      if (videoSrc && videoSrc.startsWith("blob:")) {
        URL.revokeObjectURL(videoSrc);
      }

      const newVideoSrc = URL.createObjectURL(file);
      setVideoFile(file);
      setVideoSrc(newVideoSrc);
      toast({
        title: "Video Loaded",
        description: `${file.name} is ready to play.`,
      });
    }
  };

  const triggerFileInput = () => {
    fileInputRef.current?.click();
  };

  // Cleanup object URL on component unmount or when src changes
  useEffect(() => {
    const currentSrc = videoSrc;
    return () => {
      if (currentSrc && currentSrc.startsWith("blob:")) {
        URL.revokeObjectURL(currentSrc);
      }
    };
  }, [videoSrc]);

  return (
    <main className="flex flex-col items-center justify-center min-h-screen p-4 md:p-8 bg-background text-foreground">
      <header className="mb-8 text-center">
        <h1 className="text-4xl font-bold text-primary font-headline">LocalVision</h1>
        <p className="text-lg text-muted-foreground">Upload and play your local video files with ease.</p>
      </header>

      {videoSrc ? (
        <div className="w-full max-w-4xl">
          <VideoPlayer src={videoSrc} onEnded={() => console.log("Video ended")} />
          <div className="mt-6 text-center">
            <Button onClick={triggerFileInput} variant="outline" className="hover:bg-accent hover:text-accent-foreground">
              <UploadCloud className="mr-2 h-5 w-5" /> Upload Another Video
            </Button>
          </div>
        </div>
      ) : (
        <Card className="w-full max-w-md shadow-xl">
          <CardHeader>
            <CardTitle className="text-2xl text-center font-headline">Upload Your Video</CardTitle>
            <CardDescription className="text-center">
              Select a video file from your computer to start watching. Supports MP4, AVI, MOV, and other common formats.
            </CardDescription>
          </CardHeader>
          <CardContent className="flex flex-col items-center justify-center p-10">
            <UploadCloud className="w-24 h-24 text-primary mb-6" strokeWidth={1.5} />
            <Button onClick={triggerFileInput} size="lg" className="bg-primary text-primary-foreground hover:bg-primary/90 active:bg-primary/80">
              Choose Video File
            </Button>
          </CardContent>
        </Card>
      )}

      <input
        type="file"
        ref={fileInputRef}
        onChange={handleFileChange}
        accept="video/mp4,video/x-msvideo,video/quicktime,video/*" // More generic video/* as fallback
        className="hidden"
      />
      
      <footer className="mt-12 text-center text-sm text-muted-foreground">
        <p>&copy; {new Date().getFullYear()} LocalVision. All rights reserved.</p>
        <p>Enjoy your videos, securely on your device.</p>
      </footer>
    </main>
  );
}
